#!/bin/bash

# Project Structure Map Generator
# Auto-updates .github/PROJECT_MAP.md with current project structure

# Change to project root directory
cd "$(dirname "$0")/.."

MAP_FILE=".github/PROJECT_MAP.md"
LIB_DIR="lib"

echo "🗺️  Updating project structure map..."

# Create/overwrite the map file
cat > "$MAP_FILE" << EOF
# Project Structure Map (Auto-Generated)

**Last Updated:** $(date)
**Generated by:** update_project_map.sh

## Current Structure

\`\`\`
EOF

# Add directory structure
if command -v tree &> /dev/null; then
    tree "$LIB_DIR" -I '__pycache__|*.pyc|.DS_Store|*.g.dart|*.freezed.dart' >> "$MAP_FILE"
else
    # Fallback if tree is not available
    find "$LIB_DIR" -type d | sort | sed 's|[^/]*/|  |g' >> "$MAP_FILE"
fi

cat >> "$MAP_FILE" << EOF
\`\`\`

## File Statistics

EOF

# Count files by type and location
echo "### By File Type" >> "$MAP_FILE"
find "$LIB_DIR" -name "*.dart" | grep -E "(screen|bloc|cubit|model|entity|repository|usecase)" | \
sed 's/.*\///' | sed 's/\.dart$//' | sed 's/.*_//' | sort | uniq -c | sort -nr | \
while read count type; do
    echo "- **${type}**: $count files" >> "$MAP_FILE"
done

echo "" >> "$MAP_FILE"
echo "### By Feature Module" >> "$MAP_FILE"

# Analyze each feature
if [ -d "$LIB_DIR/features" ]; then
    for feature_dir in "$LIB_DIR/features"/*; do
        if [ -d "$feature_dir" ]; then
            feature_name=$(basename "$feature_dir")
            dart_count=$(find "$feature_dir" -name "*.dart" | wc -l)
            echo "- **$feature_name**: $dart_count files" >> "$MAP_FILE"
            
            # Check for required directories
            missing_dirs=""
            for required_dir in "data" "domain" "presentation"; do
                if [ ! -d "$feature_dir/$required_dir" ]; then
                    missing_dirs="$missing_dirs $required_dir"
                fi
            done
            
            if [ ! -z "$missing_dirs" ]; then
                echo "  - ⚠️  Missing:$missing_dirs" >> "$MAP_FILE"
            fi
        fi
    done
else
    echo "- No features directory found" >> "$MAP_FILE"
fi

echo "" >> "$MAP_FILE"
echo "### Structure Validation" >> "$MAP_FILE"

# Find misplaced files
misplaced_blocs=$(find "$LIB_DIR" -name "*_bloc.dart" -o -name "*_cubit.dart" | grep -v "/bloc/" | wc -l)
misplaced_screens=$(find "$LIB_DIR" -name "*_screen.dart" -o -name "*_page.dart" | grep -v "/screens/" | wc -l)

if [ "$misplaced_blocs" -gt 0 ] || [ "$misplaced_screens" -gt 0 ]; then
    echo "⚠️  **Issues Found:**" >> "$MAP_FILE"
    if [ "$misplaced_blocs" -gt 0 ]; then
        echo "- $misplaced_blocs BLoC/Cubit files in wrong directories" >> "$MAP_FILE"
    fi
    if [ "$misplaced_screens" -gt 0 ]; then
        echo "- $misplaced_screens Screen files in wrong directories" >> "$MAP_FILE"
    fi
else
    echo "✅ **Structure is compliant**" >> "$MAP_FILE"
fi

echo "" >> "$MAP_FILE"
echo "## Quick Actions" >> "$MAP_FILE"
echo "" >> "$MAP_FILE"
echo "\`\`\`bash" >> "$MAP_FILE"
echo "# Update this map" >> "$MAP_FILE"
echo "./update_project_map.sh" >> "$MAP_FILE"
echo "" >> "$MAP_FILE"
echo "# Find misplaced files" >> "$MAP_FILE"
echo "find lib/ -name '*_bloc.dart' | grep -v '/bloc/'" >> "$MAP_FILE"
echo "find lib/ -name '*_screen.dart' | grep -v '/screens/'" >> "$MAP_FILE"
echo "" >> "$MAP_FILE"
echo "# Validate structure" >> "$MAP_FILE"
echo "flutter analyze && flutter test" >> "$MAP_FILE"
echo "\`\`\`" >> "$MAP_FILE"

echo "✅ Project map updated: $MAP_FILE"
echo "📊 Found $(find "$LIB_DIR" -name "*.dart" | wc -l) Dart files"

# Optional: Show the map
if [ "$1" = "--show" ]; then
    echo ""
    echo "📋 Current Project Map:"
    cat "$MAP_FILE"
fi
